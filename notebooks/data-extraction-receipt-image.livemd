<!-- livebook:{"file_entries":[{"name":"image1.jpg","type":"attachment"},{"name":"image2.jpg","type":"attachment"}],"persist_outputs":true} -->

# Images: Extract Structured Data from an Image

```elixir
Mix.install([
  {:langchain, github: "brainlid/langchain"},
  # {:langchain, "~> 0.2.0"},
  {:kino, "~> 0.12.0"}
])
```

## Image

Before we can extract data from an image, we need an image with some data to extract!

A common document that we all encounter with meaningful data on it is a purchase receipt. Let's see what data we can extract and turn into a structured form that is easily usable by our application.

```elixir
input = Kino.Input.image("Receipt Image", format: :jpeg)
```

```elixir
receipt = Kino.Input.read(input)
```

<!-- livebook:{"output":true} -->

```
%{format: :jpeg, width: 1081, file_ref: {:file, "iijmmku364w4zk25"}, height: 1921}
```

We'll encode the image data in `base64` text for sumbitting it to an LLM.

```elixir
receipt_base64 =
  receipt.file_ref
  |> Kino.Input.file_path()
  |> File.read!()
  |> :base64.encode()

:ok
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Anthropic's Claude LLM

With our receipt data ready, let's use Claude 3 to extract data from the image and get it back in a structured format. Anthropic has specifically trained their models on business oriented images.

You'll need your own Anthropic API key to make this request. You can provide it through the Livebook secrets feature.

```elixir
Application.put_env(:langchain, :anthropic_key, System.fetch_env!("LB_ANTHROPIC_API_KEY"))
```

<!-- livebook:{"output":true} -->

```
:ok
```

Let's setup our Anthropic chat model.

**NOTE:** Keep in mind that different versions of Claude will give different results. You can play with that to find a good cost/accuracy for your specific need.

```elixir
alias LangChain.ChatModels.ChatAnthropic

anthropic_chat_model =
  ChatAnthropic.new!(%{model: "claude-3-opus-20240229", temperature: 0, stream: false})
```

<!-- livebook:{"output":true} -->

```
%LangChain.ChatModels.ChatAnthropic{
  endpoint: "https://api.anthropic.com/v1/messages",
  api_key: nil,
  api_version: "2023-06-01",
  receive_timeout: 60000,
  model: "claude-3-opus-20240229",
  max_tokens: 4096,
  temperature: 0.0,
  top_p: nil,
  top_k: nil,
  stream: false
}
```

Let's provide the messages that instruct the LLM what to do and provide the image to operate on.

```elixir
alias LangChain.Message
alias LangChain.Message.ContentPart

messages = [
  Message.new_system!(
    "You are an expert assistant at identifying and extracting important information from images of purchase receipts."
  ),
  Message.new_user!([
    ContentPart.text!(
      "Examine the pictured receipt(s) the use the receipt_data function to identify the data."
    ),
    ContentPart.image!(receipt_base64, media: :jpg)
  ])
]
```

<!-- livebook:{"output":true} -->

```
[
  %LangChain.Message{
    content: "You are an expert assistant at identifying and extracting important information from images of purchase receipts.",
    index: nil,
    status: :complete,
    role: :system,
    name: nil,
    tool_calls: [],
    tool_results: nil
  },
  %LangChain.Message{
    content: [
      %LangChain.Message.ContentPart{
        type: :text,
        content: "Examine the pictured receipt(s) the use the receipt_data function to identify the data.",
        options: nil
      },
      %LangChain.Message.ContentPart{
        type: :image,
        content: "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" <> ...,
        options: [media: :jpg]
      }
    ],
    index: nil,
    status: :complete,
    role: :user,
    name: nil,
    tool_calls: [],
    tool_results: nil
  }
]
```

We instructed the LLM to use a tool called "receipt_data". Let's define that tool now. It gives the LLM an ability to provide a structured response with all of the identified and extracted data.

Knowing users, we should expect that an image might contain multiple receipts in it. To handle this, our function will accept an array of recipt data.

We'll define the data we care about for each receipt found. It's important to provide good descriptions and type information so we get better data coming out.

```elixir
alias LangChain.Function
alias LangChain.FunctionParam

# We're defining a function that looks like this:
#
#     receipt_data([receipt_data_1, receipt_data_2])
#
# It takes a list of maps. We also define the receipt map data to capture and describe it.
tool =
  Function.new!(%{
    name: "receipt_data",
    description:
      "Function for you to report identified receipt data from an image. If no receipt data is found, provide an empty array. Include all possible data that you can.",
    parameters: [
      FunctionParam.new!(%{
        name: "recipts",
        type: :array,
        item_type: "object",
        description: "Array of receipt information found in an image",
        required: true,
        object_properties: [
          FunctionParam.new!(%{
            name: "merchant_name",
            type: :string,
            description: "Name of the merchant from the receipt where the purchase was made"
          }),
          FunctionParam.new!(%{
            name: "total",
            type: :number,
            description: "The total amount of money spent in the purchase",
            required: true
          }),
          FunctionParam.new!(%{
            name: "sales tax",
            type: :number,
            description: "The amount of money on the receipt collected for sales tax"
          }),
          FunctionParam.new!(%{
            name: "tip",
            type: :number,
            description:
              "The amount of money on the receipt as a tip. Usually for a food service or restaurant"
          }),
          FunctionParam.new!(%{
            name: "currency",
            type: :number,
            description:
              "The currency used on the receipt. Examples are USD, EUR, GBP, etc. Infer if possible",
            required: true
          }),
          FunctionParam.new!(%{
            name: "date",
            type: :string,
            description: "Date of the purchase. Date format: YYYY-MM-DD"
          })
        ]
      })
    ],
    function: fn args, _context ->
      IO.inspect(args, label: "FUNCTION EXECUTED WITH")
      :ok
    end
  })
```

<!-- livebook:{"output":true} -->

```
%LangChain.Function{
  name: "receipt_data",
  description: "Function for you to report identified receipt data from an image. If no receipt data is found, provide an empty array. Include all possible data that you can.",
  display_text: nil,
  function: #Function<41.125776118/2 in :erl_eval.expr/6>,
  async: true,
  parameters_schema: nil,
  parameters: [
    %LangChain.FunctionParam{
      name: "recipts",
      type: :array,
      item_type: "object",
      enum: [],
      description: "Array of receipt information found in an image",
      required: true,
      object_properties: [
        %LangChain.FunctionParam{
          name: "merchant_name",
          type: :string,
          item_type: nil,
          enum: [],
          description: "Name of the merchant from the receipt where the purchase was made",
          required: false,
          object_properties: []
        },
        %LangChain.FunctionParam{
          name: "total",
          type: :number,
          item_type: nil,
          enum: [],
          description: "The total amount of money spent in the purchase",
          required: true,
          object_properties: []
        },
        %LangChain.FunctionParam{
          name: "sales tax",
          type: :number,
          item_type: nil,
          enum: [],
          description: "The amount of money on the receipt collected for sales tax",
          required: false,
          object_properties: []
        },
        %LangChain.FunctionParam{
          name: "tip",
          type: :number,
          item_type: nil,
          enum: [],
          description: "The amount of money on the receipt as a tip. Usually for a food service or restaurant",
          required: false,
          object_properties: []
        },
        %LangChain.FunctionParam{
          name: "currency",
          type: :number,
          item_type: nil,
          enum: [],
          description: "The currency used on the receipt. Examples are USD, EUR, GBP, etc. Infer if possible",
          required: true,
          object_properties: []
        },
        %LangChain.FunctionParam{
          name: "date",
          type: :string,
          item_type: nil,
          enum: [],
          description: "Date of the purchase. Date format: YYYY-MM-DD",
          required: false,
          object_properties: []
        }
      ]
    }
  ]
}
```

Finally, we combine the tool with our messages and run them together through an LLMChain using the Anthropic model.

```elixir
alias LangChain.Chains.LLMChain

{:ok, _updated_chain, response} =
  %{llm: anthropic_chat_model, verbose: true}
  |> LLMChain.new!()
  |> LLMChain.add_messages(messages)
  |> LLMChain.add_tools(tool)
  |> LLMChain.run()

IO.puts(response.content)
response.tool_calls
```

<!-- livebook:{"output":true} -->

```
LLM: %LangChain.ChatModels.ChatAnthropic{
  endpoint: "https://api.anthropic.com/v1/messages",
  api_key: nil,
  api_version: "2023-06-01",
  receive_timeout: 60000,
  model: "claude-3-opus-20240229",
  max_tokens: 4096,
  temperature: 0.0,
  top_p: nil,
  top_k: nil,
  stream: false
}
MESSAGES: [
  %LangChain.Message{
    content: "You are an expert assistant at identifying and extracting important information from images of purchase receipts.",
    index: nil,
    status: :complete,
    role: :system,
    name: nil,
    tool_calls: [],
    tool_results: nil
  },
  %LangChain.Message{
    content: [
      %LangChain.Message.ContentPart{
        type: :text,
        content: "Examine the pictured receipt(s) the use the receipt_data function to identify the data.",
        options: nil
      },
      %LangChain.Message.ContentPart{
        type: :image,
        content: "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" <> ...,
        options: [media: :jpg]
      }
    ],
    index: nil,
    status: :complete,
    role: :user,
    name: nil,
    tool_calls: [],
    tool_results: nil
  }
]
TOOLS: [
  %LangChain.Function{
    name: "receipt_data",
    description: "Function for you to report identified receipt data from an image. If no receipt data is found, provide an empty array. Include all possible data that you can.",
    display_text: nil,
    function: #Function<41.125776118/2 in :erl_eval.expr/6>,
    async: true,
    parameters_schema: nil,
    parameters: [
      %LangChain.FunctionParam{
        name: "recipts",
        type: :array,
        item_type: "object",
        enum: [],
        description: "Array of receipt information found in an image",
        required: true,
        object_properties: [
          %LangChain.FunctionParam{
            name: "merchant_name",
            type: :string,
            item_type: nil,
            enum: [],
            description: "Name of the merchant from the receipt where the purchase was made",
            required: false,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "total",
            type: :number,
            item_type: nil,
            enum: [],
            description: "The total amount of money spent in the purchase",
            required: true,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "sales tax",
            type: :number,
            item_type: nil,
            enum: [],
            description: "The amount of money on the receipt collected for sales tax",
            required: false,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "tip",
            type: :number,
            item_type: nil,
            enum: [],
            description: "The amount of money on the receipt as a tip. Usually for a food service or restaurant",
            required: false,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "currency",
            type: :number,
            item_type: nil,
            enum: [],
            description: "The currency used on the receipt. Examples are USD, EUR, GBP, etc. Infer if possible",
            required: true,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "date",
            type: :string,
            item_type: nil,
            enum: [],
            description: "Date of the purchase. Date format: YYYY-MM-DD",
            required: false,
            object_properties: []
          }
        ]
      }
    ]
  }
]

15:49:36.642 [error] retry: got exception, will retry in 0ms, 3 attempts left

15:49:36.642 [error] ** (Mint.TransportError) socket closed
SINGLE MESSAGE RESPONSE NO WRAPPED ARRAY: %LangChain.Message{
  content: "<thinking>\nThe receipt_data function is the relevant tool to extract key information from the receipt image. Let's go through the required parameters:\n\nrecipts (array of receipt objects):\n- total: The total of $69.50 is clearly listed on the receipt.\n- currency: The prices are in USD based on the \"$\" symbol used.\n\nThe merchant name \"TRADER JOE'S\" and date \"04/06/2017\" are also provided on the receipt, though those are optional parameters.\n\nAll the required parameters are available, so I can proceed with calling the function.\n</thinking>",
  index: nil,
  status: :complete,
  role: :assistant,
  name: nil,
  tool_calls: [
    %LangChain.Message.ToolCall{
      status: :complete,
      type: :function,
      call_id: "toolu_01LpoMEWtXzcgNXhNpZJGhQR",
      name: "receipt_data",
      arguments: %{
        "recipts" => [
          %{
            "currency" => "USD",
            "date" => "2017-04-06",
            "merchant_name" => "TRADER JOE'S",
            "total" => 69.5
          }
        ]
      },
      index: nil
    }
  ],
  tool_results: nil
}
<thinking>
The receipt_data function is the relevant tool to extract key information from the receipt image. Let's go through the required parameters:

recipts (array of receipt objects):
- total: The total of $69.50 is clearly listed on the receipt.
- currency: The prices are in USD based on the "$" symbol used.

The merchant name "TRADER JOE'S" and date "04/06/2017" are also provided on the receipt, though those are optional parameters.

All the required parameters are available, so I can proceed with calling the function.
</thinking>
```

<!-- livebook:{"output":true} -->

```
[
  %LangChain.Message.ToolCall{
    status: :complete,
    type: :function,
    call_id: "toolu_01LpoMEWtXzcgNXhNpZJGhQR",
    name: "receipt_data",
    arguments: %{
      "recipts" => [
        %{
          "currency" => "USD",
          "date" => "2017-04-06",
          "merchant_name" => "TRADER JOE'S",
          "total" => 69.5
        }
      ]
    },
    index: nil
  }
]
```

Nice! With no code changes, we can make a similar request about images from Anthropic's Claude LLM as well!

```elixir
response.tool_calls
```

<!-- livebook:{"output":true} -->

```
[
  %LangChain.Message.ToolCall{
    status: :complete,
    type: :function,
    call_id: "toolu_01LpoMEWtXzcgNXhNpZJGhQR",
    name: "receipt_data",
    arguments: %{
      "recipts" => [
        %{
          "currency" => "USD",
          "date" => "2017-04-06",
          "merchant_name" => "TRADER JOE'S",
          "total" => 69.5
        }
      ]
    },
    index: nil
  }
]
```

## OpenAI's ChatGPT LLM

While we're all setup, we can ren the same request against OpenAI.

**NOTE:** You must provide your own OPENAI_API_KEY in the Livebook secrets to do this.

```elixir
Application.put_env(:langchain, :openai_key, System.fetch_env!("LB_OPENAI_API_KEY"))
```

<!-- livebook:{"output":true} -->

```
:ok
```

First, let's setup the model for talking to ChatGPT. For simplicity, we've set it not stream the response back. We'll get the final analysis once it's complete.

**NOTE:** For ChatGPT, image support requires using the `"gpt-4-visual-preview"` model at the time this was created.

```elixir
alias LangChain.ChatModels.ChatOpenAI

openai_chat_model =
  ChatOpenAI.new!(%{model: "gpt-4-1106-vision-preview", temperature: 0, stream: false})
```

<!-- livebook:{"output":true} -->

```
%LangChain.ChatModels.ChatOpenAI{
  endpoint: "https://api.openai.com/v1/chat/completions",
  model: "gpt-4-1106-vision-preview",
  api_key: nil,
  temperature: 0.0,
  frequency_penalty: 0.0,
  receive_timeout: 60000,
  seed: nil,
  n: 1,
  json_response: false,
  stream: false,
  max_tokens: nil,
  user: nil
}
```

Using the our configured LLM chat model, we'll use the same messages and tool and see how it performs for our needs.

```elixir
alias LangChain.Chains.LLMChain

{:ok, _updated_chain, openai_response} =
  %{llm: openai_chat_model, verbose: true}
  |> LLMChain.new!()
  |> LLMChain.add_messages(messages)
  |> LLMChain.add_tools(tool)
  |> LLMChain.run()

IO.puts(openai_response.content)
openai_response.content
```

<!-- livebook:{"output":true} -->

```
LLM: %LangChain.ChatModels.ChatOpenAI{
  endpoint: "https://api.openai.com/v1/chat/completions",
  model: "gpt-4-1106-vision-preview",
  api_key: nil,
  temperature: 0.0,
  frequency_penalty: 0.0,
  receive_timeout: 60000,
  seed: nil,
  n: 1,
  json_response: false,
  stream: false,
  max_tokens: nil,
  user: nil
}
MESSAGES: [
  %LangChain.Message{
    content: "You are an expert assistant at identifying and extracting important information from images of purchase receipts.",
    index: nil,
    status: :complete,
    role: :system,
    name: nil,
    tool_calls: [],
    tool_results: nil
  },
  %LangChain.Message{
    content: [
      %LangChain.Message.ContentPart{
        type: :text,
        content: "Examine the pictured receipt(s) the use the receipt_data function to identify the data.",
        options: nil
      },
      %LangChain.Message.ContentPart{
        type: :image,
        content: "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" <> ...,
        options: [media: :jpg]
      }
    ],
    index: nil,
    status: :complete,
    role: :user,
    name: nil,
    tool_calls: [],
    tool_results: nil
  }
]
TOOLS: [
  %LangChain.Function{
    name: "receipt_data",
    description: "Function for you to report identified receipt data from an image. If no receipt data is found, provide an empty array. Include all possible data that you can.",
    display_text: nil,
    function: #Function<41.125776118/2 in :erl_eval.expr/6>,
    async: true,
    parameters_schema: nil,
    parameters: [
      %LangChain.FunctionParam{
        name: "recipts",
        type: :array,
        item_type: "object",
        enum: [],
        description: "Array of receipt information found in an image",
        required: true,
        object_properties: [
          %LangChain.FunctionParam{
            name: "merchant_name",
            type: :string,
            item_type: nil,
            enum: [],
            description: "Name of the merchant from the receipt where the purchase was made",
            required: false,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "total",
            type: :number,
            item_type: nil,
            enum: [],
            description: "The total amount of money spent in the purchase",
            required: true,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "sales tax",
            type: :number,
            item_type: nil,
            enum: [],
            description: "The amount of money on the receipt collected for sales tax",
            required: false,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "tip",
            type: :number,
            item_type: nil,
            enum: [],
            description: "The amount of money on the receipt as a tip. Usually for a food service or restaurant",
            required: false,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "currency",
            type: :number,
            item_type: nil,
            enum: [],
            description: "The currency used on the receipt. Examples are USD, EUR, GBP, etc. Infer if possible",
            required: true,
            object_properties: []
          },
          %LangChain.FunctionParam{
            name: "date",
            type: :string,
            item_type: nil,
            enum: [],
            description: "Date of the purchase. Date format: YYYY-MM-DD",
            required: false,
            object_properties: []
          }
        ]
      }
    ]
  }
]
SINGLE MESSAGE RESPONSE: %LangChain.Message{
  content: nil,
  index: 0,
  status: :complete,
  role: :assistant,
  name: nil,
  tool_calls: [
    %LangChain.Message.ToolCall{
      status: :complete,
      type: :function,
      call_id: "call_zRwR0XjPdRgmM2T1AVOFihkd",
      name: "receipt_data",
      arguments: %{
        "recipts" => [
          %{
            "currency" => 69.5,
            "date" => "04/06/2017",
            "merchant_name" => "TRADER JOE'S",
            "sales tax" => 1.73,
            "tip" => 0,
            "total" => 69.5
          }
        ]
      },
      index: nil
    }
  ],
  tool_results: nil
}

```

<!-- livebook:{"output":true} -->

```
nil
```

```elixir
openai_response.tool_calls
```

<!-- livebook:{"output":true} -->

```
[
  %LangChain.Message.ToolCall{
    status: :complete,
    type: :function,
    call_id: "call_zRwR0XjPdRgmM2T1AVOFihkd",
    name: "receipt_data",
    arguments: %{
      "recipts" => [
        %{
          "currency" => 69.5,
          "date" => "04/06/2017",
          "merchant_name" => "TRADER JOE'S",
          "sales tax" => 1.73,
          "tip" => 0,
          "total" => 69.5
        }
      ]
    },
    index: nil
  }
]
```

TODO: NEED A SMOOTHER/CLEANER WAY TO GET THE RESULT.

<!-- livebook:{"offset":34331,"stamp":{"token":"XCP.B1c61bHSiKNPuA1gcmZi0gcRfpHBzOJwyTVXtEtos4YUW8xvPVnmTWGp_ItQveKfdXkdDsi62qjky8vgUO4aBHWO_L-5ckAofzDr1BfyU3-DURcxx4zCwF-5gF8TDYxcWn8Fdn0eE5vsqvej0p87","version":2}} -->
